<?xml version="1.0"?>
<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:omg="http://www.omegahat.org">

<articleinfo>

<title>Client-side SOAP in S</title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title>Abstract</title>
<para>
 This gives a brief introduction to the client-side SOAP mechanism
 provided by the <omg:pkg>SSOAP</omg:pkg> package.  SOAP stands for the Simple
 Object Access Protocol and is a means for making remote functions
 calls in a client-server architecture using XML and HTTP.  This is
 one of the primary Web Services vehicles.  This package leverages the
 XML package for parsing and generating XML from within S and the HTTP
 connection classes to send and receive the communications.  The
 package provides a mechanism to automatically generate S code that
 implements an interface to a Web server described by a WSDL (Web
 Service Description Language) document.
</para>
<para>

The <omg:pkg>SSOAP</omg:pkg> package is currently a basic attempt to
implement a client-side mechanism for invoking SOAP methods.  SOAP
stands for the Simple Object Access Protocol and is documented in
<citation>SOAP:W3Spec</citation>.  It uses XML to encode remote procedure calls
(RPC) from a client to a server and transmit the result back to the
client.  While XML is used to describe the content of the call and
result, HTTP is used to implement the communication of these data.  In
S, we have the <omg:pkg>XML</omg:pkg> package with which we can read and write
XML.  R provides the <r:func>socketConnection</r:func> function with which
we can create a read-write stream between R and a SOAP server.
Combining each of these with the <r:func>readLines</r:func>, we can
implement the entire client-server communication mechanism in S code
and implement basic calls to SOAP servers.
</para>
<para>

The package is at a very early stage and is more of an experiment and
example of using XML. There are several details to work out before it
is functional, and even more before it is robust.  The hope is to
encourage others to investigate it and bring their knowledge of SOAP,
etc. to help fix the problems.
</para>

<note date="July 20th, 2003"><para> Recent revisions have made the package more
robust and added features to ``compile'' client-side functions for
server methods that include information about parameter and return
types.  Thanks go to Vincent Carey, Robert Gentleman and Jianhua Zhang
all of Harvard and the BioConductor project for illustrating issues.
</para></note>

<para>
 The top-level function for invoking a SOAP method is <r:func>.SOAP</r:func>.
There are several pieces that one has to pass to this to define the
SOAP method request.  The first thing you have to provide is the
identity of the SOAP server.  You create a SOAP server object in S
using the <r:func>SOAPServer</r:func> function and you give it the name of
the host machine (e.g.  <systemitem class="hostame">services.ensembl.org</systemitem>) and the file
within the server that identifies the SOAP server.  If the server is
not listening for requests on the usual HTTP server port (i.e. 80),
you can also specify the port on which it is listening.
For example, to communicate with the Ensembl soap server,
we can specify the server as 

<r:code>
SOAPServer("services.ensembl.org", "cgi-bin/ensembl_rpcrouter", 7070)
</r:code>

</para>
<para>

 Having identified, the server, we must also specify the name of the
method to invoke and provide any arguments that are needed to
parameterize the call to the method.  The name of the method is given
as a simple string via the <r:arg>method</r:arg> argument (what a surprise!).
The arguments are given via S's <r:dots/> mechanism as regular S objects.%'
In some calls, you will know the names of the parameters for the
SOAP method. In that case, you can give them in the usual 
S fashion:

<r:code>
 .SOAP(server, "myMethod", country1 = "England", country2 = "Japan")
</r:code>



These names are used XML tags within the SOAP request
to identify the arguments.
<programlisting><![CDATA[
 <SOAP-ENV:Body>
   <x:getRate xmlns=...>
      <country1 xsi:type="xsd:string">England</country1>
      <country2 xsi:type="xsd:string">Japan</country1>
   </getRate>
 </SOAP-ENV:Body> 
]]></programlisting>

</para>
<para>

In other cases, you will only know the order of the parameters and you
need not provide names. The <r:func>.SOAP</r:func> will use ``made-up''
names for the XML elements.
</para>
<para>

Most SOAP servers will also require that you specify what is called
a <emphasis>SOAPAction</emphasis> value.  This is a string that is included in the
HTTP request to the server to help it interpret the request.  How you
find this string is server-dependent.  However, once you have it, you
specify it in the <r:func>.SOAP</r:func> call via the <r:arg>action</r:arg>
argument.
</para>

<para>
For some servers, the actual value is the one announced in the
server's documentation combined with the name of the method.  For
example, a SOAPAction of <literal>urn:xmethods-delayed-quote</literal> for a
method <methodname>getQuote</methodname> would be transformed to
<literal>urn:xmethods-delayed-quote#getQuote</literal>.  Obviously, it is
convenient and less error-prone to have the <r:func>.SOAP</r:func> function
do this for us rather than have to input the same information in two
places.  So, by default, this is what the <r:func>.SOAP</r:func> function
does using its <r:func>handlers</r:func> argument.  Specifically, this is a
collection of functions that are used to modify the inputs and process
the outputs for the basic <r:func>.SOAP</r:func> mechanism.  They allow us
to parameterize the <r:func>.SOAP</r:func> function without having to write
methods for standard data types or override functions.  We can supply
very specific functions that take inputs from the <r:func>.SOAP</r:func>
call and return suitably modified values.  The default handlers are
available by calling <r:func>SOAPHandlers</r:func>.  And within
this, the <r:field>action</r:field> element is is responsible for pasting the
user-supplied <r:arg>action</r:arg> value with the method name.  If this is
not what is expected for the particular server, you can specify a
different collection of <r:arg>handlers</r:arg>.
</para>
<para>

In addition to the <xml:tag>SOAPAction</xml:tag> value, the server also expects
a particular XML namespace to be used for the XML tags that give the
method name and the arguments.  This can be given as a simple string
via the <r:arg>xmlns</r:arg> argument.
If you explicitly want to control the local identifier
used in the tags (e.g. the <code>x</code> in <xml:tag>x:methodName</xml:tag>)
for this namespace, you can supply that name in the character
vector using

<r:code>
  xmlns = c(x="http://myNamespace/URI")
</r:code>
</para>
<para>

 More than one namespace can be used, but while the others will be
included in the XML for the request, they will typically play no role
in the invocation.
</para>

<para>
The final aspect of the <r:func>.SOAP</r:func> call is the
<r:arg>nameSpaces</r:arg> argument.  The SOAP request is enclosed within an
<xml:tag>Envelope</xml:tag> and within that an <xml:tag>Body</xml:tag> element within the
XML.  These are qualified with suitable namespace identifiers and
declarations to denote that they are SOAP requests and to specify the
version of SOAP and how they and the sub-nodes should be interpreted.
So we need to add these namespace declarations to the XML
<xml:tag>Envelope</xml:tag> element in the request. The <r:arg>nameSpaces</r:arg>
argument used to identify these ``global'' or SOAP-level names by
giving the name-value pairs as a named character vector. Each
name-value pair gives the identifier for the namespace and its URI.
</para>

<para>
In much the same way that we may want to omit or override some of the
default namespaces, we call a function <r:func>SOAPNameSpaces</r:func> to
get the vector namespaces. By default, this returns the usual
collection. One can switch between different versions of namespaces
such as version 1.1 and 1.2 by giving the appropriate name as the
value of the <r:arg>version</r:arg> parameter.  This is used to index the list
<r:var>.SOAPDefaultNames</r:var> and indeed, you can add additional
collections to that list. Regardless of which collection of namespaces
you select in this list, you can also specify your own values for
particular elements within that collection or simply augment it with
new ones. We do this by listing the name-value pairs in the call to
<r:func>SOAPNameSpaces</r:func>.

</para>
<para>

If you want to get a subset of the values within a particular
collection of namespaces, you can give the names of the elements to
include or, if more convenient, the ones to exclude.  For example, the
following two commands give the same collection, but work by including
the elements of interest and excluding the extraneous ones,
respectively.

<r:code>
 SOAPNameSpaces(include = c("SOAP-ENC", "SOAP-ENV"))
 SOAPNameSpaces(exclude = c("xsi", "xsd"))
</r:code>
</para>
<para>


 The main purpose of the <r:func>SOAPNameSpaces</r:func> function is to
make it easy to control what is include in a single call. It avoid the
need to create temporary variables with the correct values, pass them
in the call and then remove them.  The function approach allows the
collection to be specified in-line within the call.

</para>
</section>
<section>
<title>Converting the S values to SOAP</title>
<p>
The basic mechanism for converting S objects to SOAP is implemented in
the functions <r:func>toSOAP</r:func>, <r:func>toSOAPArray</r:func> and
<r:func>toSOAPStruct</r:func>.  These can be used in converting arguments
to a SOAP call or implementing a SOAP server and converting the result
to a SOAP object.  The mechanism is simple.  Primitive scalars are
mapped to their equivalents in the XSI/XSD schema.  Real numbers map
to S numeric types, booleans map to logical, int to integers and
strings to character vectors.  Non-scalar primitives (i.e. vectors of
length $>1$) and unnamed lists are mapped to SOAP arrays.  Named lists
are mapped to SOAP structures.
</p>
</section>
<section>
<title>The Result</title>
<p>
Typically we will be interested in the result of the <r:func>.SOAP</r:func>
call.  This is procssed when the server returns it via another SOAP
envelope.  Assuming there were no errors, we extract the contents of
that envelope and pass the XML node to <r:func>fromSOAP</r:func>.  This
attempts to convert it to an S object based on some basic ideas.  It
handles the primitive types defined in the XSI and XSD schema in the
natural manner.  Real numbers map to S numeric types, booleans map to
logical, int to integers and strings to character vectors.  Arrays in
SOAP are mapped to lists in S.  If they have the same primitive type,
we can collapse them to a regular vector. (This is not currently
done?).  Support for partially transmitted and sparse SOAP arrays is
implemented, but multi-dimensional arrays have yet to be
enabled. (Please let me know of an example.)  SOAP complex objects are
mapped to S3-style objects in which we create a list with named
elements taken from the sub-nodes of the XML result.  This works
recursively and the same rules apply to these sub-nodes.
</p>
<p>
If you want to take over the conversion, you can specify a different
function in the <r:func>SOAPHandlers</r:func>.
It should be named <r:arg>result</r:arg>
and should take $4$ arguments.
These are 
<ul>
<li> the full XML content returned by the server, i.e. the
  <xml:tag>Envelope</xml:tag> element
</li>
<li> the HTTP header given as a vector of name-value pairs.
This can be useful for determining auxillary information
about the XML. 
</li>
<li> the name of the method that was invoked.
This may be needed to get the appropriate element in the
XML tree that contains the result.
</li>
<li> the SOAP server object identifying which server was used.
If this has specific characteristics about how it returns
values, we may want to build this into the handler.
</li>
</ul>
</p>

</section>
<section>
<title>Errors</title>
<p>
If there was an error in the SOAP call, the server responds with an
HTTP error. Along with the header information, the server also adds
some information about the source of the error.  We return this as a
<r:class>SOAPFault</r:class> object that identifies the nature of the failure
and contains any extra information provided by the server.
Essentially, these are exceptions that we would throw if we had
an exception system.
</p>
<p>
There are 4 types of built-in SOAP errors
and they each have the same structure inherited
from <r:class>SOAPFault</r:class>.
<!-- Was a \begin{description} with the class names as labels. -->
<ul>
<li>
<r:class>SOAPVersionMismatchFault</r:class>
</li>
<li>
<r:class>SOAPMustUnderstandFault</r:class>
</li>
<li>
<r:class>SOAPClientFault</r:class>
</li>
<li>
<r:class>SOAPServerFault</r:class>
</li>
</ul>
</p>
<p>
If an error is not one of these types, we create a
<r:class>SOAPGeneralFault</r:class> object and include its <xml:tag>faultcode</xml:tag> as
a slot in the object.
</p>
</section>
<section>
<title>Examples</title>

<p>
<r:code><![CDATA[
.SOAP(SOAPServer("services.xmethods.net", "soap"),
       "getRate", country1="England", country2 = "Japan",
       action="urn:xmethods-CurrencyExchange")

.SOAP(SOAPServer("services.xmethods.net", "soap/servlet/rpcrouter"),
      "getPrice", "0596000278",
      action="urn:xmethods-BNPriceCheck")

s <- SOAPServer("http://services.xmethods.net/soap")
.SOAP(s,
      "getQuote", "AMZN",
      action="urn:xmethods-delayed-quotes#getQuote")


.SOAP(SOAPServer("services.soaplite.com", "temper.cgi"),
       "c2f", 37.5,
      action="http://www.soaplite.com/Temperatures")


 # Different action and namespace.
 # Specify handlers=NULL to avoid the additional processing of the
 # SOAPAction string, i.e. the appending of the method name.
 # This kills off all the handlers. If we want to remove only the
 # "action" element, we have to be more explicit.

s1 <- SOAPServer("services.soaplite.com", "interop.cgi")
.SOAP(s1,
      "echoString", "From R",
      action="urn:soapinterop",
      xmlns=c(namesp1="http://soapinterop.org/"),
      handlers =NULL)
]]></r:code>
</p>
</section>
<section>
<title>Service Declarations</title>
<p>
Somtimes, a server's methods are published in a WSDL <citation>w3:WSDL</citation>
(Web Service Description Language)  file.  This is an XML
description of the different methods and the details of how to call
them.  It lists the expected types of the arguments and return value,
the namespaces and SOAP action strings, etc.  Since this is an XML
file, we can easily read it into S and use the information to generate
function definitions that implement the <r:func>.SOAP</r:func> calls.  This
is very similar to reading IDL files in CORBA and DCOM to generate
client bindings.
</p>
<p>
<note date="July 2003"><p> In response to a query by Vincent Carey, we have now
implemented a basic mechanism to read WSDL files and create S
functions that can be used to call SOAP server methods.  This is
intended to be done by a person interested in a particular SOAP server
and who wants to create a package providing access to it from R.  In
other words, this is a pre-processing step that is done once and not
by each user and each time she wants to access the SOAP server.
</p></note>

</p>
<p>
The idea is quite simple. We start by reading the 
WSDL file into R using the simple DOM parser from
the <omg:pkg>XML</omg:pkg> package.
The function <r:func>processWSDL</r:func> does this
and returns an object of class <r:class>SOAPServerDescription</r:class>.
This contains information about how to connect to the server,
its methods and also any data types it defines for use in these
methods.
<emphasis>It is possible for multiple servers to be defined in a single 
WSDL file. We have left this possibility open but have not been
entirely consistent. Much of the testing and development has been done
using the KEGG WSDL file.</emphasis>


<r:code>
library(SSOAP)
def = processWSDL()
</r:code>

</p>
<p>
Given this definition, we can now use the
<r:func>genSOAPClientInterface</r:func>
function to generate S functions for each of the methods
in the server.

<r:code>
ff = genSOAPClientInterface(def = tmp, tmp@name)
</r:code>

@ This has the additional side-effect of defining S4-style classes for
each of the complex compound data types defined in the WSDL file.  It
does this by iterating over the slots described there and adding them
as slots to an S4 class of the same name as the compound complex type.
For example, the <literal>GENESResult</literal> type in the <filename>KEGG.wsdl</filename> file 
<programlisting><![CDATA[
        <xsd:complexType name="GENESResult">
                <xsd:all>
                        <xsd:element name="kid" type="xsd:string"/>
                        <xsd:element name="keggdef" type="xsd:string"/>
                </xsd:all>
        </xsd:complexType>
]]></programlisting>
gives rise to a corresponding S4 class

<r:code>
 getClass("GENESResult")
<r:output><![CDATA[
Slots:
                          
Name:        kid   keggdef
Class: character character
]]></r:output>
</r:code>
</p>
<p>
 Let's return to the methods generated by the call to
<r:func>genSOAPClientInterface</r:func>.  There is a function for each of
the <xml:tag>operation</xml:tag> elements in the <xml:tag>bindings</xml:tag>
element of the WSDL document.  We map the names from SOAP style to S4
style. By this, we mean that we remove any underscores (_),
capitalize the first letter of all but the resulting first word, and
then collapse the words into a single word by removing the space.  For
example, <literal>get_all_neighbors_by_gene</literal> is mapped to
<literal>getAllNeighborsByGene</literal>.  This is a common programming
convention and avoids complexity in S when having to quote the _.
</p>
<p>
Each of these functions has access to the S4-<r:class>WSDLMethod</r:class>
object that was created when from the WSDL file description.  This
object contains all the information about the method including its
name, parameter types, return value type and SOAP action.  (At
present, we use lexical scoping to make this object available to the
function.  In the future we could perform direct substitution when
creating the function, but this is harder than it need be at present.)
The body of this function simply involves a call to the
<r:func>.SOAP</r:func> function, providing it with the server, arguments,
type information, SOAP action, etc.  These functions have a formal
list of parameters that are computed from the WSDL description and
pass these arguments in a call via the <r:dots/> parameter of the
<r:func>.SOAP</r:func> function. In this way, the functions provide more
information for the caller than a regular SOAP-call.  Additionally,
the function passes the type information about the SOAP parameters and
these are used to control how the arguments are converted to their
SOAP equivalent. This is important and convenient as it provides a way
for the user to pass a scalar value, for example, and have it be
represented appropriately as a scalar or an array. This removes the
ambiguity introduced from S's unusual but consistent view of scalars
being simply vectors of length 1.
</p>
</section>
<section>
<title>Other SOAP Tools</title>
<p>
Other SOAP interfaces include <ulink url="">SOAP::Lite</ulink>,
<ulink url="">Apache's Java SOAP classes</ulink>.
</p>
</section>

<section>
<title>SOAP</title>

<para>

</para>

</section>

</article>